# Otimizador de Doa√ß√µes de Sangue e √ìrg√£os por Compatibilidade R√°pida

from queue import PriorityQueue

# ------------------------------
# ESTRUTURAS DE DADOS PRINCIPAIS
# ------------------------------

# Tabela hash: mapeia tipo sangu√≠neo ‚Üí lista de doadores
hash_dadores = {
    "A+": [], "A-": [], "B+": [], "B-": [],
    "AB+": [], "AB-": [], "O+": [], "O-": []
}

# Lista de pacientes aguardando
lista_pacientes = []

# Fila de prioridade: pacientes por urg√™ncia (quanto menor o n√∫mero, maior a prioridade)
fila_urgencia = PriorityQueue()

# Pilha: hist√≥rico de doadores removidos ou indispon√≠veis
pilha_cancelamentos = []

# ------------------------------
# FUN√á√ïES DE SUPORTE
# ------------------------------

def pode_doar(doador, receptor):
    # Compatibilidade sangu√≠nea simplificada (sangue apenas)
    mapa = {
        "O-": ["O-", "O+", "A-", "A+", "B-", "B+", "AB-", "AB+"],
        "O+": ["O+", "A+", "B+", "AB+"],
        "A-": ["A-", "A+", "AB-", "AB+"],
        "A+": ["A+", "AB+"],
        "B-": ["B-", "B+", "AB-", "AB+"],
        "B+": ["B+", "AB+"],
        "AB-": ["AB-", "AB+"],
        "AB+": ["AB+"]
    }
    return receptor in mapa.get(doador, [])

def registrar_doador(nome, tipo_sangue):
    if tipo_sangue in hash_dadores:
        hash_dadores[tipo_sangue].append(nome)
        print(f"‚úÖ Doador {nome} (tipo {tipo_sangue}) registrado com sucesso!")
    else:
        print("‚ùå Tipo sangu√≠neo inv√°lido.")

def registrar_paciente(nome, tipo_sangue, urgencia):
    paciente = {
        "nome": nome,
        "tipo_sangue": tipo_sangue,
        "urgencia": urgencia
    }
    lista_pacientes.append(paciente)
    fila_urgencia.put((urgencia, paciente))
    print(f"üÜò Paciente {nome} registrado na fila com prioridade {urgencia}.")

def listar_dadores():
    print("\nü©∏ Lista de doadores por tipo sangu√≠neo:")
    for tipo, nomes in hash_dadores.items():
        print(f" - {tipo}: {', '.join(nomes) if nomes else 'Nenhum doador'}")

def listar_pacientes():
    print("\nüè• Pacientes aguardando doa√ß√£o:")
    for paciente in lista_pacientes:
        print(f" - {paciente['nome']} ({paciente['tipo_sangue']}) - prioridade {paciente['urgencia']}")

def processar_doacoes():
    print("\nüö® Iniciando processamento de doa√ß√µes...")
    if fila_urgencia.empty():
        print("üì≠ Nenhum paciente na fila.")
        return

    estoque_vazio = True

    while not fila_urgencia.empty():
        urgencia, paciente = fila_urgencia.get()
        tipo_receptor = paciente['tipo_sangue']
        nome_receptor = paciente['nome']
        doador_encontrado = False

        for tipo_doador, lista in hash_dadores.items():
            if pode_doar(tipo_doador, tipo_receptor) and lista:
                nome_doador = lista.pop(0)  # remove o primeiro dispon√≠vel
                print(f"‚ù§Ô∏è {nome_doador} (tipo {tipo_doador}) ‚Üí {nome_receptor} (tipo {tipo_receptor})")
                print(f"üì¢ Aviso: Paciente {nome_receptor} recebeu uma doa√ß√£o de {nome_doador}.")
                doador_encontrado = True
                estoque_vazio = False
                break

        if not doador_encontrado:
            print(f"‚ùå Nenhum doador compat√≠vel encontrado para {nome_receptor} ({tipo_receptor})")

    if estoque_vazio:
        print("üö® Alerta: Nenhum doador dispon√≠vel no estoque para atender os pacientes.")

def desfazer_cancelamento():
    if not pilha_cancelamentos:
        print("‚ùå Nenhum cancelamento a desfazer.")
        return

    tipo, nome = pilha_cancelamentos.pop()
    hash_dadores[tipo].insert(0, nome)
    print(f"‚Ü©Ô∏è Doador {nome} (tipo {tipo}) restaurado.")

def cancelar_doador(nome):
    for tipo, lista in hash_dadores.items():
        if nome in lista:
            lista.remove(nome)
            pilha_cancelamentos.append((tipo, nome))
            print(f"‚ùå Doador {nome} removido da lista (cancelado).")
            return
    print("‚ö†Ô∏è Doador n√£o encontrado.")

# ------------------------------
# MENU PRINCIPAL
# ------------------------------

def menu():
    while True:
        print("\n===== DOA√á√ïES =====")
        print("1. Registrar doador")
        print("2. Registrar paciente")
        print("3. Listar doadores")
        print("4. Listar pacientes")
        print("5. Processar doa√ß√µes")
        print("6. Cancelar doador")
        print("7. Desfazer cancelamento")
        print("8. Sair")

        opcao = input("Escolha uma op√ß√£o: ").strip()

        if opcao == "1":
            nome = input("Nome do doador: ")
            tipo = input("Tipo sangu√≠neo: ").upper()
            registrar_doador(nome, tipo)
        elif opcao == "2":
            nome = input("Nome do paciente: ")
            tipo = input("Tipo sangu√≠neo: ").upper()
            try:
                urgencia = int(input("N√≠vel de urg√™ncia (1-5): "))
            except ValueError:
                print("‚ùå Urg√™ncia inv√°lida.")
                continue
            registrar_paciente(nome, tipo, urgencia)
        elif opcao == "3":
            listar_dadores()
        elif opcao == "4":
            listar_pacientes()
        elif opcao == "5":
            processar_doacoes()
        elif opcao == "6":
            nome = input("Nome do doador a cancelar: ")
            cancelar_doador(nome)
        elif opcao == "7":
            desfazer_cancelamento()
        elif opcao == "8":
            print("üëã Encerrando otimizador de doa√ß√µes.")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
    menu()
